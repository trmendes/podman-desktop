"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[81900],{28482:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>c,contentTitle:()=>r,default:()=>p,frontMatter:()=>o,metadata:()=>a,toc:()=>l});var i=t(24246),s=t(71670);const o={},r="Function: listContainers()",a={id:"namespaces/containerEngine/functions/listContainers",title:"Function: listContainers()",description:"listContainers(): Promise\\",source:"@site/api/namespaces/containerEngine/functions/listContainers.md",sourceDirName:"namespaces/containerEngine/functions",slug:"/namespaces/containerEngine/functions/listContainers",permalink:"/api/namespaces/containerEngine/functions/listContainers",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"typedocSidebar",previous:{title:"Function: inspectContainer()",permalink:"/api/namespaces/containerEngine/functions/inspectContainer"},next:{title:"Function: listImages()",permalink:"/api/namespaces/containerEngine/functions/listImages"}},c={},l=[{value:"Returns",id:"returns",level:2},{value:"Source",id:"source",level:2}];function u(n){const e={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",p:"p",strong:"strong",...(0,s.a)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.h1,{id:"function-listcontainers",children:"Function: listContainers()"}),"\n",(0,i.jsxs)(e.blockquote,{children:["\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"listContainers"}),"(): ",(0,i.jsx)(e.code,{children:"Promise"}),"< ",(0,i.jsx)(e.a,{href:"/api/interfaces/ContainerInfo",children:(0,i.jsx)(e.code,{children:"ContainerInfo"})}),"[] >"]}),"\n"]}),"\n",(0,i.jsx)(e.p,{children:"Returns the list of containers across all container engines, in any state (running or not)."}),"\n",(0,i.jsx)(e.h2,{id:"returns",children:"Returns"}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.code,{children:"Promise"}),"< ",(0,i.jsx)(e.a,{href:"/api/interfaces/ContainerInfo",children:(0,i.jsx)(e.code,{children:"ContainerInfo"})}),"[] >"]}),"\n",(0,i.jsxs)(e.p,{children:["A promise resolving to an array of containers information. This method returns a subset of the available information for containers. To get the complete description of a specific container, you can use the ",(0,i.jsx)(e.a,{href:"/api/namespaces/containerEngine/functions/inspectContainer",children:"containerEngine.inspectContainer"})," method."]}),"\n",(0,i.jsx)(e.h2,{id:"source",children:"Source"}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.a,{href:"https://github.com/trmendes/podman-desktop/blob/14638e1/packages/extension-api/src/extension-api.d.ts#L2586",children:"packages/extension-api/src/extension-api.d.ts:2586"})})]})}function p(n={}){const{wrapper:e}={...(0,s.a)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(u,{...n})}):u(n)}},71670:(n,e,t)=>{t.d(e,{Z:()=>a,a:()=>r});var i=t(27378);const s={},o=i.createContext(s);function r(n){const e=i.useContext(o);return i.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function a(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(s):n.components||s:r(n.components),i.createElement(o.Provider,{value:e},n.children)}}}]);